"use strict";(self.webpackChunkpl_vuepress_next=self.webpackChunkpl_vuepress_next||[]).push([[559],{2913:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-674bfa0b",path:"/temas/introduccion-a-pl/esprima.html",title:"",lang:"en-US",frontmatter:{sidebar:"auto"},excerpt:"",headers:[{level:2,title:"Esprima/Espree Examples",slug:"esprima-espree-examples",children:[{level:3,title:"REPL example",slug:"repl-example",children:[]},{level:3,title:"Example: Searching for Specific Identifiers",slug:"example-searching-for-specific-identifiers",children:[]}]},{level:2,title:"Práctica Espree Logging",slug:"practica-espree-logging",children:[]},{level:2,title:"ASTExplorer",slug:"astexplorer",children:[]},{level:2,title:"Master the Art of the AST",slug:"master-the-art-of-the-ast",children:[]},{level:2,title:"Syntax Analysis: PEG.js Example",slug:"syntax-analysis-peg-js-example",children:[]},{level:2,title:"References",slug:"references",children:[]}],git:{contributors:[{name:"Casiano Rodriguez-Leon",email:"crguezl@ull.edu.es",commits:3}]},filePathRelative:"temas/introduccion-a-pl/esprima.md"}},709:(n,s,a)=>{a.r(s),a.d(s,{default:()=>yn});var e=a(6252),p=a(3577);const t=(0,e._)("h2",{id:"esprima-espree-examples",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#esprima-espree-examples","aria-hidden":"true"},"#"),(0,e.Uk)(" Esprima/Espree Examples")],-1),r={style:{color:"white"}},o=(0,e.Uk)("En el "),l={href:"https://github.com/ULL-ESIT-GRADOII-PL/esprima-pegjs-jsconfeu-talk",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("Repo ULL-ESIT-GRADOII-PL/esprima-pegjs-jsconfeu-talk"),i=(0,e.Uk)(" encontrará el material de esta lección. "),u=(0,e._)("strong",null,"Clone este repo",-1),k=(0,e.Uk)("."),b=(0,e.Uk)("The examples in this repo use a couple of JavaScript compiler frameworks: "),m={href:"http://esprima.org",target:"_blank",rel:"noopener noreferrer"},d=(0,e.Uk)("Esprima"),g=(0,e.Uk)(" and Espree."),y={href:"https://github.com/eslint/espree",target:"_blank",rel:"noopener noreferrer"},h=(0,e.Uk)("Espree"),f=(0,e.Uk)(" started out as a fork of "),v={href:"http://esprima.org",target:"_blank",rel:"noopener noreferrer"},x=(0,e.Uk)("Esprima"),_=(0,e.Uk)(" v1.2.2, the last stable published released of Esprima before work on ECMAScript 6 began. "),j={href:"https://github.com/eslint/espree",target:"_blank",rel:"noopener noreferrer"},E=(0,e.Uk)("Espree"),U=(0,e.Uk)(" is now built on top of "),w={href:"https://github.com/ternjs/acorn",target:"_blank",rel:"noopener noreferrer"},L=(0,e.Uk)("Acorn"),S=(0,e.Uk)(", which has a modular architecture that allows extension of core functionality. The goal of "),T={href:"https://github.com/eslint/espree",target:"_blank",rel:"noopener noreferrer"},A=(0,e.Uk)("Espree"),I=(0,e.Uk)(" is to produce output that is similar to Esprima with a similar API so that it can be used in place of Esprima."),P=(0,e._)("h3",{id:"repl-example",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#repl-example","aria-hidden":"true"},"#"),(0,e.Uk)(" REPL example")],-1),W=(0,e.Uk)("Una vez clonado el "),R={href:"https://github.com/ULL-ESIT-GRADOII-PL/esprima-pegjs-jsconfeu-talk",target:"_blank",rel:"noopener noreferrer"},N=(0,e.Uk)("repo ULL-ESIT-GRADOII-PL/esprima-pegjs-jsconfeu-talk"),q=(0,e.Uk)(", instalamos las dependencias:"),D=(0,e.uE)('<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>➜  esprima-pegjs-jsconfeu-talk git:(master) npm i\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>y arrancamos el bucle REPL de Node.JS:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>➜  esprima-pegjs-jsconfeu-talk git:(master) node\nWelcome to Node.js v14.4.0.\nType &quot;.help&quot; for more information.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Cargamos <code>espree</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&gt;</span> <span class="token keyword">const</span> espree <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;espree&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">undefined</span>\n<span class="token operator">&gt;</span> espree<span class="token punctuation">.</span>version\n<span class="token string">&#39;7.3.1&#39;</span>\n<span class="token operator">&gt;</span> espree<span class="token punctuation">.</span>latestEcmaVersion\n<span class="token number">12</span>\n<span class="token operator">&gt;</span> espree<span class="token punctuation">.</span>supportedEcmaVersions\n<span class="token punctuation">[</span>\n  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span>\n  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Navegar en el árbol AST es complicado. El atributo <a href="espree-visitorkeys"><code>espree.visitorKeys</code></a> nos proporciona la lista de nodos y los nombres de los atributos de sus hijos</p><p>Hagamos un análisis léxico:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&gt;</span> espree<span class="token punctuation">.</span><span class="token function">tokenize</span><span class="token punctuation">(</span><span class="token string">&#39;answer = /* comment*/ 42&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">range</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">[</span>\n  Token <span class="token punctuation">{</span>\n    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;answer&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">range</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  Token <span class="token punctuation">{</span>\n    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Punctuator&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">range</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  Token <span class="token punctuation">{</span>\n    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Numeric&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;42&#39;</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">range</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">24</span> <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>Hagamos ahora un análisis sintáctico:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&gt;</span> espree<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;const answer = 42&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">tokens</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\nUncaught <span class="token punctuation">[</span>SyntaxError<span class="token operator">:</span> The keyword <span class="token string">&#39;const&#39;</span> is reserved\n<span class="token punctuation">]</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">lineNumber</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">column</span><span class="token operator">:</span> <span class="token number">1</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>La versión ECMA de JS usada por defecto por <code>espree</code> es la 5 y esta no admite <code>const</code></p><p>Especifiquemos la versión ECMA que queremos:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&gt;</span> espree<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;const answer = 42&#39;</span><span class="token punctuation">,</span> \n              <span class="token punctuation">{</span> <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> espree<span class="token punctuation">.</span>latestEcmaVersion<span class="token punctuation">,</span> \n                <span class="token literal-property property">tokens</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n              <span class="token punctuation">)</span>\nNode <span class="token punctuation">{</span>\n  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Program&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    Node <span class="token punctuation">{</span>\n      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;VariableDeclaration&#39;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">declarations</span><span class="token operator">:</span> <span class="token punctuation">[</span>Array<span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">kind</span><span class="token operator">:</span> <span class="token string">&#39;const&#39;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">&#39;script&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">tokens</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    Token <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Keyword&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;const&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    Token <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;answer&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">12</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    Token <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Punctuator&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">14</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    Token <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Numeric&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;42&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">17</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>Observe que el Árbol no aparece completo. El log que usa el bucle REPL de Node lo trunca en el hijo <code>declarations</code> (sólo nos muestra que es un array <code>[Array]</code> sin expandirlo) para que la salida no sea excesivamente larga.</p><p>Para que nos muestre el árbol vamos a usar el método <code>util.inspect</code> del módulo <code>util</code> que convierte un objeto en una string:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&gt;</span> <span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">undefined</span>\n<span class="token operator">&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n    util<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span>\n        espree<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;const answer = 42&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n        <span class="token punctuation">{</span><span class="token literal-property property">depth</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span>\n    <span class="token punctuation">)</span>\n <span class="token punctuation">)</span>\nNode <span class="token punctuation">{</span>\n  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Program&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    Node <span class="token punctuation">{</span>\n      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;VariableDeclaration&#39;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">declarations</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n        Node <span class="token punctuation">{</span>\n          <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;VariableDeclarator&#39;</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">id</span><span class="token operator">:</span> Node <span class="token punctuation">{</span>\n            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;answer&#39;</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">init</span><span class="token operator">:</span> Node <span class="token punctuation">{</span>\n            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Literal&#39;</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span>\n            <span class="token literal-property property">raw</span><span class="token operator">:</span> <span class="token string">&#39;42&#39;</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">kind</span><span class="token operator">:</span> <span class="token string">&#39;const&#39;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">&#39;script&#39;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">undefined</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div>',16),O=(0,e.Uk)("Usando la herramienta web "),G={href:"https://astexplorer.net",target:"_blank",rel:"noopener noreferrer"},C=(0,e.Uk)("https://astexplorer.net"),M=(0,e.Uk)(" podemos navegar el AST producido por varios compiladores JS:"),V=(0,e._)("a",{href:"https://astexplorer.net/#/gist/b5826862c47dfb7dbb54cec15079b430/latest",target:"_blank"},[(0,e.Uk)("AST de "),(0,e._)("code",null,"answer = 42")],-1),z=(0,e.Uk)(" en "),J={href:"https://astexplorer.net",target:"_blank",rel:"noopener noreferrer"},H=(0,e.Uk)("https://astexplorer.net"),K=(0,e._)("h3",{id:"example-searching-for-specific-identifiers",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#example-searching-for-specific-identifiers","aria-hidden":"true"},"#"),(0,e.Uk)(" Example: Searching for Specific Identifiers")],-1),Z=(0,e.Uk)("The file "),$={href:"https://github.com/ULL-ESIT-GRADOII-PL/esprima-pegjs-jsconfeu-talk/blob/master/idgrep.js",target:"_blank",rel:"noopener noreferrer"},Y=(0,e.Uk)("idgrep.js"),B=(0,e.Uk)(" is a very simple example of using Esprima to do static analysis on JavaScript code."),F=(0,e.uE)('<p>It provides a function <code>idgrep</code> that finds the appearances of identifiers matching a search string inside the input code.</p><p>Given an input like this:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>➜  esprima-pegjs-jsconfeu-talk git:(master) cat hacky.js \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// This is a hack!</span>\n<span class="token keyword">const</span> <span class="token function-variable function">hacky</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> hack <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token string">&#39;hacky string&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>if we search for <code>hack</code> it produces:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>➜  esprima-pegjs-jsconfeu-talk git:(master) ./idgrep.js hacky.js\n1:6: const hacky = () =&gt; {\n2:8:     let hack = 3;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Observe how the appearances of <code>hack</code> inside the comment or the string aren&#39;t shown</p><h2 id="practica-espree-logging" tabindex="-1"><a class="header-anchor" href="#practica-espree-logging" aria-hidden="true">#</a> Práctica Espree Logging</h2>',8),Q={href:"/practicas/esprima-logging",target:"_blank",rel:"noopener noreferrer"},X=(0,e.Uk)("Descripción de la Práctica Espree Logging"),nn=(0,e.uE)('<h2 id="astexplorer" tabindex="-1"><a class="header-anchor" href="#astexplorer" aria-hidden="true">#</a> ASTExplorer</h2><ul><li><a href="https://astexplorer.net/" target="_blank">astexplorer.net demo</a></li></ul><h2 id="master-the-art-of-the-ast" tabindex="-1"><a class="header-anchor" href="#master-the-art-of-the-ast" aria-hidden="true">#</a> Master the Art of the AST</h2><ul><li><a href="master-the-art-of-the-ast">More Advanced examples from the talk <em>Master the Art of the AST</em></a></li></ul><h2 id="syntax-analysis-peg-js-example" tabindex="-1"><a class="header-anchor" href="#syntax-analysis-peg-js-example" aria-hidden="true">#</a> Syntax Analysis: PEG.js Example</h2>',5),sn={href:"https://github.com/ULL-ESIT-GRADOII-PL/esprima-pegjs-jsconfeu-talk/blob/master/altjs.js",target:"_blank",rel:"noopener noreferrer"},an=(0,e.Uk)("altjs.js"),en=(0,e.Uk)(' is the code for the "AltJS language in 5 minutes" section presented in the second half of the '),pn={href:"http://2013.jsconf.eu/speakers/patrick-dubroy-parsing-compiling-and-static-metaprogramming.html",target:"_blank",rel:"noopener noreferrer"},tn=(0,e.Uk)("talk Parsing, Compiling, and Static Metaprogramming"),rn=(0,e.Uk)(" by Patrick Dubroy"),on=(0,e._)("h2",{id:"references",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#references","aria-hidden":"true"},"#"),(0,e.Uk)(" References")],-1),ln={href:"https://github.com/eslint/espree",target:"_blank",rel:"noopener noreferrer"},cn=(0,e.Uk)("Espree"),un={href:"https://github.com/eslint/espree#options",target:"_blank",rel:"noopener noreferrer"},kn=(0,e.Uk)("Options for parse and tokenize methods"),bn=(0,e._)("li",null,[(0,e._)("a",{href:"https://astexplorer.net/",target:"_blank"},"astexplorer.net demo")],-1),mn={href:"https://github.com/ULL-ESIT-GRADOII-PL/esprima-pegjs-jsconfeu-talk/blob/master/idgrep.coffee",target:"_blank",rel:"noopener noreferrer"},dn=(0,e.Uk)("idgrep.coffee"),gn={},yn=(0,a(3744).Z)(gn,[["render",function(n,s){const a=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e._)("pre",r,(0,p.zw)(n.$site)+"\n\n"+(0,p.zw)(n.$page)+"\n",1),(0,e._)("p",null,[o,(0,e._)("a",l,[c,(0,e.Wm)(a)]),i,u,k]),(0,e._)("p",null,[b,(0,e._)("a",m,[d,(0,e.Wm)(a)]),g]),(0,e._)("p",null,[(0,e._)("a",y,[h,(0,e.Wm)(a)]),f,(0,e._)("a",v,[x,(0,e.Wm)(a)]),_,(0,e._)("a",j,[E,(0,e.Wm)(a)]),U,(0,e._)("a",w,[L,(0,e.Wm)(a)]),S,(0,e._)("a",T,[A,(0,e.Wm)(a)]),I]),P,(0,e._)("p",null,[W,(0,e._)("a",R,[N,(0,e.Wm)(a)]),q]),D,(0,e._)("p",null,[O,(0,e._)("strong",null,[(0,e._)("a",G,[C,(0,e.Wm)(a)])]),M]),(0,e._)("ul",null,[(0,e._)("li",null,[V,z,(0,e._)("a",J,[H,(0,e.Wm)(a)])])]),K,(0,e._)("p",null,[Z,(0,e._)("a",$,[Y,(0,e.Wm)(a)]),B]),F,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",Q,[X,(0,e.Wm)(a)])])]),nn,(0,e._)("p",null,[(0,e._)("a",sn,[an,(0,e.Wm)(a)]),en,(0,e._)("a",pn,[tn,(0,e.Wm)(a)]),rn]),on,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",ln,[cn,(0,e.Wm)(a)]),(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",un,[kn,(0,e.Wm)(a)])])])]),bn,(0,e._)("li",null,[(0,e._)("a",mn,[dn,(0,e.Wm)(a)])])])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);