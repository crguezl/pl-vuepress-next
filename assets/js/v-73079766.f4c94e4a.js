"use strict";(self.webpackChunkpl_vuepress_next=self.webpackChunkpl_vuepress_next||[]).push([[854],{2983:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-73079766",path:"/practicas/esprima-logging.html",title:"Espree Logging",lang:"en-US",frontmatter:{title:"Espree Logging",published:!1,date:"2022/02/19",order:7,rubrica:["Opciones en línea de comandos (`-o`, `-V`, `-h`, etc.)","Añade mensajes de logs a la entrada de las `function()`","Añade mensajes de logs a la entrada de las arrow `() => { ... }`","Tutorial README.md y paneles bien presentados","El `package.json` [tiene scripts](./esprima-logging#entrega) para ejecutar el programa"]},excerpt:"",headers:[{level:2,title:"Descripción de la Tarea",slug:"descripcion-de-la-tarea",children:[]},{level:2,title:"Q & A",slug:"q-a",children:[{level:3,title:"Question: Backticks in espree",slug:"question-backticks-in-espree",children:[]},{level:3,title:"Answer: Use option {ecmaVersion:6}",slug:"answer-use-option-ecmaversion-6",children:[]}]},{level:2,title:"Reto 1: Funciones Flecha Gorda",slug:"reto-1-funciones-flecha-gorda",children:[]},{level:2,title:"Reto 2: Número de Línea",slug:"reto-2-numero-de-linea",children:[]},{level:2,title:"Recursos",slug:"recursos",children:[{level:3,title:"Material para la Práctica",slug:"material-para-la-practica",children:[]},{level:3,title:"Debugging",slug:"debugging",children:[]},{level:3,title:"Commander",slug:"commander",children:[]},{level:3,title:"Soluciones (No disponibles)",slug:"soluciones-no-disponibles",children:[]}]},{level:2,title:"Entrega",slug:"entrega",children:[]},{level:2,title:"References",slug:"references",children:[]}],git:{contributors:[{name:"Casiano Rodriguez-Leon",email:"crguezl@ull.edu.es",commits:1}]},filePathRelative:"practicas/esprima-logging.md"}},7255:(n,s,a)=>{a.r(s),a.d(s,{default:()=>An});var e=a(6252);const p=(0,e._)("h2",{id:"descripcion-de-la-tarea",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#descripcion-de-la-tarea","aria-hidden":"true"},"#"),(0,e.Uk)(" Descripción de la Tarea")],-1),t=(0,e.Uk)("En el repo "),o={href:"https://github.com/ULL-ESIT-GRADOII-PL/esprima-pegjs-jsconfeu-talk",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("Repo ULL-ESIT-GRADOII-PL/esprima-pegjs-jsconfeu-talk"),l=(0,e.Uk)(" encontrará el programa "),r=(0,e._)("code",null,"logging-espree.js",-1),u=(0,e.Uk)(" el cual implementa una función "),i=(0,e._)("code",null,"addLogging",-1),k=(0,e.Uk)(" que:"),d=(0,e.uE)('<ul><li>cuando se llama analiza el código JS que se la da como entrada</li><li>produciendo como salida un código JS equivalente que inserta mensajes de <code>console.log</code> a la entrada de cada función.</li></ul><p>Por ejemplo, cuando se llama con esta entrada:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">addLogging</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\nfunction foo(a, b) {   \n  var x = &#39;blah&#39;;   \n  var y = (function () {\n    return 3;\n  })();\n}     \nfoo(1, &#39;wut&#39;, 3);\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>produce una salida como esta:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[~/javascript-learning/esprima-pegjs-jsconfeu-talk(private)]$ node logging-espree.js \n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Entering foo()&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">&#39;blah&#39;</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> <span class="token function-variable function">y</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Entering &lt;anonymous function&gt;()&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;wut&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Este es el código de <code>logging-espree.js</code>:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[~/javascript-learning/esprima-pegjs-jsconfeu-talk(private)]$ cat logging-espree.js \n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> escodegen <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;escodegen&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> espree <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;espree&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> estraverse <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;estraverse&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">addLogging</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> ast <span class="token operator">=</span> espree<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    estraverse<span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n        <span class="token function-variable function">enter</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;FunctionDeclaration&#39;</span> <span class="token operator">||</span>\n                node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;FunctionExpression&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">addBeforeCode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> escodegen<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">addBeforeCode</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> name <span class="token operator">=</span> node<span class="token punctuation">.</span>id <span class="token operator">?</span> node<span class="token punctuation">.</span>id<span class="token punctuation">.</span>name <span class="token operator">:</span> <span class="token string">&#39;&lt;anonymous function&gt;&#39;</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> beforeCode <span class="token operator">=</span> <span class="token string">&quot;console.log(&#39;Entering &quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;()&#39;);&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> beforeNodes <span class="token operator">=</span> espree<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>beforeCode<span class="token punctuation">)</span><span class="token punctuation">.</span>body<span class="token punctuation">;</span>\n    node<span class="token punctuation">.</span>body<span class="token punctuation">.</span>body <span class="token operator">=</span> beforeNodes<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>body<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">addLogging</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\nfunction foo(a, b) {   \n  var x = &#39;blah&#39;;   \n  var y = (function () {\n    return 3;\n  })();\n}\nfoo(1, &#39;wut&#39;, 3);\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>Le ayudarán a entender el código estos recursos:</p>',10),b={href:"https://youtu.be/UqTlToUYK1E",target:"_blank",rel:"noopener noreferrer"},m=(0,e.Uk)("Patrick Dubroy: Parsing, Compiling, and Static Metaprogramming -- JSConf EU 2013"),g={href:"https://github.com/ULL-ESIT-GRADOII-PL/esprima-pegjs-jsconfeu-talk/blob/master/jsconfeu-logging.pdf",target:"_blank",rel:"noopener noreferrer"},f=(0,e.Uk)("Trasparencias explicando este código"),v={href:"https://astexplorer.net/#/gist/ee28a7c80b48178607f998b8242746bc/72adda89322262c0089b79c77023912d87754dbf",target:"_blank",rel:"noopener noreferrer"},h=(0,e.Uk)("AST de la función de entrada usada como ejemplo"),j=(0,e.Uk)(" en "),y={href:"https://astexplorer.net/",target:"_blank",rel:"noopener noreferrer"},x=(0,e.Uk)("https://astexplorer.net/"),w=(0,e.uE)('<p>En esta práctica, se pide:</p><ol><li>Acepte la asignación Classroom de esta tarea</li><li>En la tarea del Campus basta con entregar el enlace al repositorio</li><li>Ejecute paso a paso el código de <code>logging.js</code> usando el debugger de chrome, intentando comprender el funcionamiento de la transformación realizada. Haga un resumen de lo que ha aprendido en el fichero Markdown: <code>README.md</code></li><li>Modifique el programa para que los <code>console.log</code> insertados informen de los valores de los parámetros pasados a la función.</li></ol><p>Vea el siguiente ejemplo de como debe funcionar una solución:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ ./p0-t0-esprima-logging-sol.js \nUsage: p0-t0-esprima-logging-sol [options] &lt;filename&gt; [...]\n \nOptions:\n  -V, --version            output the version number\n  -o, --output &lt;filename&gt;  \n  -h, --help               output usage information\n[~/javascript-learning/esprima-pegjs-jsconfeu-talk(private)]$ cat input.js \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',4),_=(0,e.Uk)("El programa usado hace un parsing de la línea de comandos mediante el módulo npm "),E={href:"https://www.npmjs.com/package/commander",target:"_blank",rel:"noopener noreferrer"},U=(0,e.Uk)("commander.js"),q=(0,e.Uk)(". Puede encontrar ejemplos en el directorio "),L={href:"https://github.com/tj/commander.js/tree/master/examples",target:"_blank",rel:"noopener noreferrer"},z=(0,e.Uk)("examples"),A=(0,e.Uk)(" del repo del modulo "),S={href:"https://www.npmjs.com/package/commander",target:"_blank",rel:"noopener noreferrer"},$=(0,e.Uk)("commander.js"),I=(0,e.Uk)("."),W=(0,e.uE)('<p>Cuando lo ejecutamos con la opción <code>-V</code> nos da la versión:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ ./p0-t0-esprima-logging-sol.js -V\n0.1.0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Con la opción <code>-o input-log.js</code> especificamos el fichero de salida. El programa muestra los contenidos del fichero de entrada:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ ./p0-t0-esprima-logging-sol.js -o input-log.js input.js \ninput:\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">&#39;blah&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">z</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> z<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;wut&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Al volcar la salida, vemos que el fichero de entrada ha sido transformado correctamente:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>---\nOutput in file &#39;input-log.js&#39;\n$ cat input-log.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Entering foo(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> a <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> b <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">&#39;blah&#39;</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> <span class="token function-variable function">y</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">z</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Entering &lt;anonymous function&gt;(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> z <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> z <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;wut&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">--</span><span class="token operator">-</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Si ejecutamos la salida obtenemos la traza esperada:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ node input-log.js \nEntering foo(1,wut)\nEntering &lt;anonymous function&gt;(2)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="q-a" tabindex="-1"><a class="header-anchor" href="#q-a" aria-hidden="true">#</a> Q &amp; A</h2><h3 id="question-backticks-in-espree" tabindex="-1"><a class="header-anchor" href="#question-backticks-in-espree" aria-hidden="true">#</a> Question: Backticks in espree</h3><blockquote><p>Trabajando y experimentando con el método <code>parse()</code> del compilador <code>espree</code>, he comprobado que es incapaz de procesar cadenas de caracteres que posean en su interior el signo `, que es usado en JS para crear cadenas de caracteres que pueden aprovecharse de la interpolación de expresiones.</p></blockquote><blockquote><p>En concreto, y a modo de ejemplo, el error me ha surgido al intentar ejecutar <code>parse()</code> pasando como argumento:</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;console.log(`prueba`)&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>Me preguntaba si el analizador léxico carece verdaderamente de la capacidad para interpretar dicho símbolo y, en caso afirmativo, cómo aprovechar la mecánica de interpolación de expresiones al utilizar el analizador. En concreto, el error que se obtiene es:</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>SyntaxError: Unexpected character &#39;`&#39;.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="answer-use-option-ecmaversion-6" tabindex="-1"><a class="header-anchor" href="#answer-use-option-ecmaversion-6" aria-hidden="true">#</a> Answer: Use option <code>{ecmaVersion:6}</code></h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>\n<span class="token punctuation">[</span><span class="token operator">~</span><span class="token operator">/</span>javascript<span class="token operator">-</span>learning<span class="token operator">/</span>esprima<span class="token operator">-</span>pegjs<span class="token operator">-</span>jsconfeu<span class="token operator">-</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token keyword">private</span><span class="token punctuation">)</span><span class="token punctuation">]</span>$  node\nWelcome to Node<span class="token punctuation">.</span>js v12<span class="token punctuation">.</span><span class="token number">10.0</span><span class="token punctuation">.</span>\nType <span class="token string">&quot;.help&quot;</span> <span class="token keyword">for</span> more information<span class="token punctuation">.</span>\n<span class="token operator">&gt;</span> code3 <span class="token operator">=</span> <span class="token string">&quot;console.log(`prueba`)&quot;</span>\n<span class="token string">&#39;console.log(`prueba`)&#39;</span>\n<span class="token operator">&gt;</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> parse <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;espree&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">undefined</span>\n<span class="token operator">&gt;</span> <span class="token function">parse</span><span class="token punctuation">(</span>code3<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\nNode <span class="token punctuation">{</span>\n  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Program&#39;</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n    Node <span class="token punctuation">{</span>\n      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;ExpressionStatement&#39;</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>\n      <span class="token literal-property property">expression</span><span class="token operator">:</span> <span class="token punctuation">[</span>Node<span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">&#39;script&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="reto-1-funciones-flecha-gorda" tabindex="-1"><a class="header-anchor" href="#reto-1-funciones-flecha-gorda" aria-hidden="true">#</a> Reto 1: Funciones Flecha Gorda</h2><p>Añada la capacidad de procesar funciones con sintáxis ECMA6 <em>flecha gorda</em> con bloque como en este ejemplo:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> \n  <span class="token keyword">return</span> e <span class="token operator">+</span><span class="token number">1</span> \n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Ejemplo de ejecución:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token operator">~</span><span class="token operator">/</span><span class="token operator">...</span><span class="token operator">/</span>eval<span class="token operator">/</span>p0<span class="token operator">-</span>t0<span class="token operator">-</span>esprima<span class="token operator">-</span><span class="token function">logging</span><span class="token punctuation">(</span>master<span class="token punctuation">)</span><span class="token punctuation">]</span>$ <span class="token punctuation">.</span><span class="token operator">/</span>logging<span class="token operator">-</span>espree<span class="token punctuation">.</span>js input<span class="token punctuation">.</span>js <span class="token operator">-</span>o output<span class="token punctuation">.</span>js \n<span class="token function-variable function">input</span><span class="token operator">:</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token string">&#39;tutu&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token operator">*</span>x <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> e <span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;wut&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token operator">--</span><span class="token operator">-</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[~/.../eval/p0-t0-esprima-logging(master)]$ cat output.js \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Entering foo(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> a <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> b <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> c <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) at line 1</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token string">&#39;tutu&#39;</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> <span class="token function-variable function">y</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Entering &lt;anonymous function&gt;(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> x <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) at line 3</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Entering &lt;anonymous function&gt;(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> e <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) at line 4</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> e <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Ejecución de la salida:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>foo(1, &#39;wut&#39;, 3);[~/.../eval/p0-t0-esprima-logging-CristoNavarro(master)]$ node output.js \nEntering foo(1, wut, 3) at line 1\nEntering &lt;anonymous function&gt;(2) at line 3\nEntering &lt;anonymous function&gt;(4) at line 4\ntutu 4 5\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',28),T=(0,e.Uk)("Vea aquí "),C={href:"https://astexplorer.net/#/gist/30fd4865621d99718672b1cd53d6c3c9/latest",target:"_blank",rel:"noopener noreferrer"},R=(0,e.Uk)("El AST Espree del ejemplo"),D=(0,e.Uk)(" usado como entrada en la ejecución anterior. Use el parser de "),P=(0,e._)("code",null,"espree",-1),N=(0,e.Uk)(" pasándole la opción "),O=(0,e._)("code",null,"ecmaVersion",-1),V=(0,e.Uk)(":"),G=(0,e.uE)('<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> ast <span class="token operator">=</span> espree<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="reto-2-numero-de-linea" tabindex="-1"><a class="header-anchor" href="#reto-2-numero-de-linea" aria-hidden="true">#</a> Reto 2: Número de Línea</h2><p>Añada el número de línea a la información de log de la función en la que se entra:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[~/javascript-learning/esprima-pegjs-jsconfeu-talk(develop)]$ ./p0-t0-esprima-logging-sol.js input.js -o salida.js\ninput:\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">&#39;blah&#39;</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">z</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> z<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;wut&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>---\nOutput in file &#39;salida.js&#39;\n[esprima-pegjs-jsconfeu-talk(develop)]$ cat salida.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Entering foo(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> a <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> b <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) at line 1</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">&#39;blah&#39;</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> <span class="token function-variable function">y</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">z</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Entering &lt;anonymous function&gt;(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> z <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) at line 3</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> z <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;wut&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[esprima-pegjs-jsconfeu-talk(develop)]$ node salida.js \nEntering foo(1,wut) at line 1\nEntering &lt;anonymous function&gt;(2) at line 3\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="recursos" tabindex="-1"><a class="header-anchor" href="#recursos" aria-hidden="true">#</a> Recursos</h2><h3 id="material-para-la-practica" tabindex="-1"><a class="header-anchor" href="#material-para-la-practica" aria-hidden="true">#</a> Material para la Práctica</h3>',10),M=(0,e.Uk)("En el "),F={href:"https://github.com/ULL-ESIT-GRADOII-PL/esprima-pegjs-jsconfeu-talk",target:"_blank",rel:"noopener noreferrer"},J=(0,e.Uk)("Repo ULL-ESIT-GRADOII-PL/esprima-pegjs-jsconfeu-talk"),B=(0,e.Uk)(" encontrará material para esta práctica"),Q={href:"https://astexplorer.net/#/gist/ee28a7c80b48178607f998b8242746bc/72adda89322262c0089b79c77023912d87754dbf",target:"_blank",rel:"noopener noreferrer"},H=(0,e.Uk)("AST de la función de entrada usada como ejemplo"),Y={href:"https://github.com/ULL-ESIT-GRADOII-PL/esprima-pegjs-jsconfeu-talk/blob/master/jsconfeu-logging.pdf",target:"_blank",rel:"noopener noreferrer"},Z=(0,e.Uk)("Trasparencias explicando este código"),K=(0,e._)("h3",{id:"debugging",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#debugging","aria-hidden":"true"},"#"),(0,e.Uk)(" Debugging")],-1),X={href:"https://javascript.info/debugging-chrome",target:"_blank",rel:"noopener noreferrer"},nn=(0,e.Uk)("Debugging Client Code with Chrome"),sn={href:"/assets/temas/introduccion-a-javascript/debugging",target:"_blank",rel:"noopener noreferrer"},an=(0,e.Uk)("Debugging NodeJS with Chrome and Visual Studio Code"),en=(0,e._)("h3",{id:"commander",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#commander","aria-hidden":"true"},"#"),(0,e.Uk)(" Commander")],-1),pn=(0,e.Uk)("El módulo npm "),tn={href:"https://www.npmjs.com/package/commander",target:"_blank",rel:"noopener noreferrer"},on=(0,e.Uk)("commander.js"),cn={href:"https://github.com/tj/commander.js/tree/master/examples",target:"_blank",rel:"noopener noreferrer"},ln=(0,e.Uk)("Examples"),rn=(0,e.Uk)(" en el repo del modulo "),un={href:"https://www.npmjs.com/package/commander",target:"_blank",rel:"noopener noreferrer"},kn=(0,e.Uk)("commander.js"),dn=(0,e._)("h3",{id:"soluciones-no-disponibles",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#soluciones-no-disponibles","aria-hidden":"true"},"#"),(0,e.Uk)(" Soluciones (No disponibles)")],-1),bn={href:"https://github.com/ULL-ESIT-GRADOII-PL/esprima-pegjs-jsconfeu-talk-private/blob/private/p0-t0-esprima-logging-sol.js",target:"_blank",rel:"noopener noreferrer"},mn=(0,e.Uk)("Una Solución"),gn={href:"https://github.com/ULL-ESIT-PL-1920/p0-t0-esprima-logging-reto-DanielGlezExp",target:"_blank",rel:"noopener noreferrer"},fn=(0,e.Uk)("Solucion con los retos"),vn=(0,e.uE)('<h2 id="entrega" tabindex="-1"><a class="header-anchor" href="#entrega" aria-hidden="true">#</a> Entrega</h2><p>En el <code>package.json</code> introduzca</p><ul><li><p>Entradas adicionales <code>scripts/test-1</code>, <code>scripts/test-2</code> etc, con los comandos para la ejecución de su solución contra diferentes programas de prueba. Algo así:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string-property property">&quot;test-1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node src/my-sol-logging-espree.js test/prueba-1.js&quot;</span><span class="token punctuation">,</span>\n      <span class="token operator">...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>Una entrada <code>scripts/test</code> que ejecute su solución contra todos los programas de prueba</p></li></ul><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references" aria-hidden="true">#</a> References</h2>',4),hn={href:"/assets/temas/tema0-introduccion-a-pl/espree-visitorkeys",target:"_blank",rel:"noopener noreferrer"},jn=(0,e.Uk)("Tipos de Nodos del AST"),yn={href:"https://github.com/eslint/espree",target:"_blank",rel:"noopener noreferrer"},xn=(0,e.Uk)("Espree"),wn={href:"https://github.com/eslint/espree#options",target:"_blank",rel:"noopener noreferrer"},_n=(0,e.Uk)("Options for parse and tokenize methods"),En={href:"https://github.com/estools/escodegen",target:"_blank",rel:"noopener noreferrer"},Un=(0,e.Uk)("Escodegen repo en GitHub"),qn={href:"https://github.com/estools/escodegen/wiki/API",target:"_blank",rel:"noopener noreferrer"},Ln=(0,e.Uk)("Escodegen API Doc"),zn={},An=(0,a(3744).Z)(zn,[["render",function(n,s){const a=(0,e.up)("ExternalLinkIcon");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("p",null,[t,(0,e._)("a",o,[c,(0,e.Wm)(a)]),l,r,u,i,k]),d,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",b,[m,(0,e.Wm)(a)])]),(0,e._)("li",null,[(0,e._)("a",g,[f,(0,e.Wm)(a)])]),(0,e._)("li",null,[(0,e._)("a",v,[h,(0,e.Wm)(a)]),j,(0,e._)("a",y,[x,(0,e.Wm)(a)])])]),w,(0,e._)("p",null,[_,(0,e._)("a",E,[U,(0,e.Wm)(a)]),q,(0,e._)("a",L,[z,(0,e.Wm)(a)]),A,(0,e._)("a",S,[$,(0,e.Wm)(a)]),I]),W,(0,e._)("p",null,[T,(0,e._)("a",C,[R,(0,e.Wm)(a)]),D,P,N,O,V]),G,(0,e._)("ul",null,[(0,e._)("li",null,[M,(0,e._)("a",F,[J,(0,e.Wm)(a)]),B]),(0,e._)("li",null,[(0,e._)("a",Q,[H,(0,e.Wm)(a)])]),(0,e._)("li",null,[(0,e._)("a",Y,[Z,(0,e.Wm)(a)])])]),K,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",X,[nn,(0,e.Wm)(a)])]),(0,e._)("li",null,[(0,e._)("a",sn,[an,(0,e.Wm)(a)])])]),en,(0,e._)("ul",null,[(0,e._)("li",null,[pn,(0,e._)("a",tn,[on,(0,e.Wm)(a)]),(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",cn,[ln,(0,e.Wm)(a)]),rn,(0,e._)("a",un,[kn,(0,e.Wm)(a)])])])])]),dn,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",bn,[mn,(0,e.Wm)(a)])]),(0,e._)("li",null,[(0,e._)("a",gn,[fn,(0,e.Wm)(a)])])]),vn,(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",hn,[jn,(0,e.Wm)(a)])]),(0,e._)("li",null,[(0,e._)("a",yn,[xn,(0,e.Wm)(a)]),(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",wn,[_n,(0,e.Wm)(a)])])])]),(0,e._)("li",null,[(0,e._)("a",En,[Un,(0,e.Wm)(a)]),(0,e._)("ul",null,[(0,e._)("li",null,[(0,e._)("a",qn,[Ln,(0,e.Wm)(a)])])])])])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}}}]);