import{r as t,o,c,a as n,h as e,F as l,b as s,g as p}from"./app.fc33fc2d.js";import{_ as r}from"./plugin-vue_export-helper.21dcd24c.js";const i={},u=n("h2",{id:"descripcion-de-la-tarea",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#descripcion-de-la-tarea","aria-hidden":"true"},"#"),s(" Descripci\xF3n de la Tarea")],-1),k=s("En el repo "),d={href:"https://github.com/ULL-ESIT-GRADOII-PL/esprima-pegjs-jsconfeu-talk",target:"_blank",rel:"noopener noreferrer"},b=s("Repo ULL-ESIT-GRADOII-PL/esprima-pegjs-jsconfeu-talk"),m=s(" encontrar\xE1 el programa "),g=n("code",null,"logging-espree.js",-1),f=s(" el cual implementa una funci\xF3n "),h=n("code",null,"addLogging",-1),v=s(" que:"),_=p(`<ul><li>cuando se llama analiza el c\xF3digo JS que se la da como entrada</li><li>produciendo como salida un c\xF3digo JS equivalente que inserta mensajes de <code>console.log</code> a la entrada de cada funci\xF3n.</li></ul><p>Por ejemplo, cuando se llama con esta entrada:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">addLogging</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
function foo(a, b) {   
  var x = &#39;blah&#39;;   
  var y = (function () {
    return 3;
  })();
}     
foo(1, &#39;wut&#39;, 3);
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>produce una salida como esta:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[~/javascript-learning/esprima-pegjs-jsconfeu-talk(private)]$ node logging-espree.js 

</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Entering foo()&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">&#39;blah&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> <span class="token function-variable function">y</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Entering &lt;anonymous function&gt;()&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;wut&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Este es el c\xF3digo de <code>logging-espree.js</code>:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[~/javascript-learning/esprima-pegjs-jsconfeu-talk(private)]$ cat logging-espree.js 

</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> escodegen <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;escodegen&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> espree <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;espree&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> estraverse <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;estraverse&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">addLogging</span><span class="token punctuation">(</span><span class="token parameter">code</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> ast <span class="token operator">=</span> espree<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
    estraverse<span class="token punctuation">.</span><span class="token function">traverse</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">enter</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">node<span class="token punctuation">,</span> parent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;FunctionDeclaration&#39;</span> <span class="token operator">||</span>
                node<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">&#39;FunctionExpression&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">addBeforeCode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> escodegen<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>ast<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">addBeforeCode</span><span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> name <span class="token operator">=</span> node<span class="token punctuation">.</span>id <span class="token operator">?</span> node<span class="token punctuation">.</span>id<span class="token punctuation">.</span>name <span class="token operator">:</span> <span class="token string">&#39;&lt;anonymous function&gt;&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> beforeCode <span class="token operator">=</span> <span class="token string">&quot;console.log(&#39;Entering &quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;()&#39;);&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> beforeNodes <span class="token operator">=</span> espree<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>beforeCode<span class="token punctuation">)</span><span class="token punctuation">.</span>body<span class="token punctuation">;</span>
    node<span class="token punctuation">.</span>body<span class="token punctuation">.</span>body <span class="token operator">=</span> beforeNodes<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>body<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">addLogging</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
function foo(a, b) {   
  var x = &#39;blah&#39;;   
  var y = (function () {
    return 3;
  })();
}
foo(1, &#39;wut&#39;, 3);
</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>Le ayudar\xE1n a entender el c\xF3digo estos recursos:</p>`,10),j={href:"https://youtu.be/UqTlToUYK1E",target:"_blank",rel:"noopener noreferrer"},x=s("Patrick Dubroy: Parsing, Compiling, and Static Metaprogramming -- JSConf EU 2013"),y={href:"https://github.com/ULL-ESIT-GRADOII-PL/esprima-pegjs-jsconfeu-talk/blob/master/jsconfeu-logging.pdf",target:"_blank",rel:"noopener noreferrer"},w=s("Trasparencias explicando este c\xF3digo"),E={href:"https://astexplorer.net/#/gist/ee28a7c80b48178607f998b8242746bc/72adda89322262c0089b79c77023912d87754dbf",target:"_blank",rel:"noopener noreferrer"},q=s("AST de la funci\xF3n de entrada usada como ejemplo"),L=s(" en "),I={href:"https://astexplorer.net/",target:"_blank",rel:"noopener noreferrer"},S=s("https://astexplorer.net/"),$=p(`<p>En esta pr\xE1ctica, se pide:</p><ol><li>Acepte la asignaci\xF3n Classroom de esta tarea</li><li>En la tarea del Campus basta con entregar el enlace al repositorio</li><li>Ejecute paso a paso el c\xF3digo de <code>logging.js</code> usando el debugger de chrome, intentando comprender el funcionamiento de la transformaci\xF3n realizada. Haga un resumen de lo que ha aprendido en el fichero Markdown: <code>README.md</code></li><li>Modifique el programa para que los <code>console.log</code> insertados informen de los valores de los par\xE1metros pasados a la funci\xF3n.</li></ol><p>Vea el siguiente ejemplo de como debe funcionar una soluci\xF3n:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ ./p0-t0-esprima-logging-sol.js 
Usage: p0-t0-esprima-logging-sol [options] &lt;filename&gt; [...]
 
Options:
  -V, --version            output the version number
  -o, --output &lt;filename&gt;  
  -h, --help               output usage information
[~/javascript-learning/esprima-pegjs-jsconfeu-talk(private)]$ cat input.js 
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,4),z=s("El programa usado hace un parsing de la l\xEDnea de comandos mediante el m\xF3dulo npm "),A={href:"https://www.npmjs.com/package/commander",target:"_blank",rel:"noopener noreferrer"},T=s("commander.js"),C=s(". Puede encontrar ejemplos en el directorio "),U={href:"https://github.com/tj/commander.js/tree/master/examples",target:"_blank",rel:"noopener noreferrer"},D=s("examples"),P=s(" del repo del modulo "),N={href:"https://www.npmjs.com/package/commander",target:"_blank",rel:"noopener noreferrer"},R=s("commander.js"),V=s("."),O=p(`<p>Cuando lo ejecutamos con la opci\xF3n <code>-V</code> nos da la versi\xF3n:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ ./p0-t0-esprima-logging-sol.js -V
0.1.0
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Con la opci\xF3n <code>-o input-log.js</code> especificamos el fichero de salida. El programa muestra los contenidos del fichero de entrada:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ ./p0-t0-esprima-logging-sol.js -o input-log.js input.js 
input:
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">&#39;blah&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">z</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> z<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;wut&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Al volcar la salida, vemos que el fichero de entrada ha sido transformado correctamente:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>---
Output in file &#39;input-log.js&#39;
$ cat input-log.js
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Entering foo(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> a <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> b <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">&#39;blah&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> <span class="token function-variable function">y</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">z</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Entering &lt;anonymous function&gt;(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> z <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> z <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;wut&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">--</span><span class="token operator">-</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Si ejecutamos la salida obtenemos la traza esperada:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ node input-log.js 
Entering foo(1,wut)
Entering &lt;anonymous function&gt;(2)
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="q-a" tabindex="-1"><a class="header-anchor" href="#q-a" aria-hidden="true">#</a> Q &amp; A</h2><h3 id="question-backticks-in-espree" tabindex="-1"><a class="header-anchor" href="#question-backticks-in-espree" aria-hidden="true">#</a> Question: Backticks in espree</h3><blockquote><p>Trabajando y experimentando con el m\xE9todo <code>parse()</code> del compilador <code>espree</code>, he comprobado que es incapaz de procesar cadenas de caracteres que posean en su interior el signo \`, que es usado en JS para crear cadenas de caracteres que pueden aprovecharse de la interpolaci\xF3n de expresiones.</p></blockquote><blockquote><p>En concreto, y a modo de ejemplo, el error me ha surgido al intentar ejecutar <code>parse()</code> pasando como argumento:</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;console.log(\`prueba\`)&quot;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>Me preguntaba si el analizador l\xE9xico carece verdaderamente de la capacidad para interpretar dicho s\xEDmbolo y, en caso afirmativo, c\xF3mo aprovechar la mec\xE1nica de interpolaci\xF3n de expresiones al utilizar el analizador. En concreto, el error que se obtiene es:</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>SyntaxError: Unexpected character &#39;\`&#39;.
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="answer-use-option-ecmaversion-6" tabindex="-1"><a class="header-anchor" href="#answer-use-option-ecmaversion-6" aria-hidden="true">#</a> Answer: Use option <code>{ecmaVersion:6}</code></h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>
<span class="token punctuation">[</span><span class="token operator">~</span><span class="token operator">/</span>javascript<span class="token operator">-</span>learning<span class="token operator">/</span>esprima<span class="token operator">-</span>pegjs<span class="token operator">-</span>jsconfeu<span class="token operator">-</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token keyword">private</span><span class="token punctuation">)</span><span class="token punctuation">]</span>$  node
Welcome to Node<span class="token punctuation">.</span>js v12<span class="token punctuation">.</span><span class="token number">10.0</span><span class="token punctuation">.</span>
Type <span class="token string">&quot;.help&quot;</span> <span class="token keyword">for</span> more information<span class="token punctuation">.</span>
<span class="token operator">&gt;</span> code3 <span class="token operator">=</span> <span class="token string">&quot;console.log(\`prueba\`)&quot;</span>
<span class="token string">&#39;console.log(\`prueba\`)&#39;</span>
<span class="token operator">&gt;</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> parse <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;espree&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">undefined</span>
<span class="token operator">&gt;</span> <span class="token function">parse</span><span class="token punctuation">(</span>code3<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
Node <span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Program&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>
  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    Node <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;ExpressionStatement&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>
      <span class="token literal-property property">expression</span><span class="token operator">:</span> <span class="token punctuation">[</span>Node<span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">&#39;script&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="reto-1-funciones-flecha-gorda" tabindex="-1"><a class="header-anchor" href="#reto-1-funciones-flecha-gorda" aria-hidden="true">#</a> Reto 1: Funciones Flecha Gorda</h2><p>A\xF1ada la capacidad de procesar funciones con sint\xE1xis ECMA6 <em>flecha gorda</em> con bloque como en este ejemplo:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> 
  <span class="token keyword">return</span> e <span class="token operator">+</span><span class="token number">1</span> 
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Ejemplo de ejecuci\xF3n:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token operator">~</span><span class="token operator">/</span><span class="token operator">...</span><span class="token operator">/</span>eval<span class="token operator">/</span>p0<span class="token operator">-</span>t0<span class="token operator">-</span>esprima<span class="token operator">-</span><span class="token function">logging</span><span class="token punctuation">(</span>master<span class="token punctuation">)</span><span class="token punctuation">]</span>$ <span class="token punctuation">.</span><span class="token operator">/</span>logging<span class="token operator">-</span>espree<span class="token punctuation">.</span>js input<span class="token punctuation">.</span>js <span class="token operator">-</span>o output<span class="token punctuation">.</span>js 
<span class="token function-variable function">input</span><span class="token operator">:</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token string">&#39;tutu&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token operator">*</span>x <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> e <span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;wut&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">--</span><span class="token operator">-</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[~/.../eval/p0-t0-esprima-logging(master)]$ cat output.js 
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Entering foo(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> a <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> b <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> c <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) at line 1</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token string">&#39;tutu&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token function-variable function">y</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Entering &lt;anonymous function&gt;(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> x <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) at line 3</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Entering &lt;anonymous function&gt;(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> e <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) at line 4</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> e <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Ejecuci\xF3n de la salida:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>foo(1, &#39;wut&#39;, 3);[~/.../eval/p0-t0-esprima-logging-CristoNavarro(master)]$ node output.js 
Entering foo(1, wut, 3) at line 1
Entering &lt;anonymous function&gt;(2) at line 3
Entering &lt;anonymous function&gt;(4) at line 4
tutu 4 5
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,28),G=s("Vea aqu\xED "),M={href:"https://astexplorer.net/#/gist/30fd4865621d99718672b1cd53d6c3c9/latest",target:"_blank",rel:"noopener noreferrer"},B=s("El AST Espree del ejemplo"),F=s(" usado como entrada en la ejecuci\xF3n anterior. Use el parser de "),J=n("code",null,"espree",-1),H=s(" pas\xE1ndole la opci\xF3n "),Q=n("code",null,"ecmaVersion",-1),K=s(":"),W=p(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> ast <span class="token operator">=</span> espree<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="reto-2-numero-de-linea" tabindex="-1"><a class="header-anchor" href="#reto-2-numero-de-linea" aria-hidden="true">#</a> Reto 2: N\xFAmero de L\xEDnea</h2><p>A\xF1ada el n\xFAmero de l\xEDnea a la informaci\xF3n de log de la funci\xF3n en la que se entra:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[~/javascript-learning/esprima-pegjs-jsconfeu-talk(develop)]$ ./p0-t0-esprima-logging-sol.js input.js -o salida.js
input:
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">&#39;blah&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">z</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> z<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;wut&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>---
Output in file &#39;salida.js&#39;
[esprima-pegjs-jsconfeu-talk(develop)]$ cat salida.js
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Entering foo(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> a <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> b <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) at line 1</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">&#39;blah&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> <span class="token function-variable function">y</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">z</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Entering &lt;anonymous function&gt;(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> z <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">) at line 3</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> z <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;wut&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[esprima-pegjs-jsconfeu-talk(develop)]$ node salida.js 
Entering foo(1,wut) at line 1
Entering &lt;anonymous function&gt;(2) at line 3
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="recursos" tabindex="-1"><a class="header-anchor" href="#recursos" aria-hidden="true">#</a> Recursos</h2><h3 id="material-para-la-practica" tabindex="-1"><a class="header-anchor" href="#material-para-la-practica" aria-hidden="true">#</a> Material para la Pr\xE1ctica</h3>`,10),Y=s("En el "),X={href:"https://github.com/ULL-ESIT-GRADOII-PL/esprima-pegjs-jsconfeu-talk",target:"_blank",rel:"noopener noreferrer"},Z=s("Repo ULL-ESIT-GRADOII-PL/esprima-pegjs-jsconfeu-talk"),nn=s(" encontrar\xE1 material para esta pr\xE1ctica"),sn={href:"https://astexplorer.net/#/gist/ee28a7c80b48178607f998b8242746bc/72adda89322262c0089b79c77023912d87754dbf",target:"_blank",rel:"noopener noreferrer"},an=s("AST de la funci\xF3n de entrada usada como ejemplo"),en={href:"https://github.com/ULL-ESIT-GRADOII-PL/esprima-pegjs-jsconfeu-talk/blob/master/jsconfeu-logging.pdf",target:"_blank",rel:"noopener noreferrer"},pn=s("Trasparencias explicando este c\xF3digo"),tn=n("h3",{id:"debugging",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#debugging","aria-hidden":"true"},"#"),s(" Debugging")],-1),on={href:"https://javascript.info/debugging-chrome",target:"_blank",rel:"noopener noreferrer"},cn=s("Debugging Client Code with Chrome"),ln={href:"/assets/temas/introduccion-a-javascript/debugging",target:"_blank",rel:"noopener noreferrer"},rn=s("Debugging NodeJS with Chrome and Visual Studio Code"),un=n("h3",{id:"commander",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#commander","aria-hidden":"true"},"#"),s(" Commander")],-1),kn=s("El m\xF3dulo npm "),dn={href:"https://www.npmjs.com/package/commander",target:"_blank",rel:"noopener noreferrer"},bn=s("commander.js"),mn={href:"https://github.com/tj/commander.js/tree/master/examples",target:"_blank",rel:"noopener noreferrer"},gn=s("Examples"),fn=s(" en el repo del modulo "),hn={href:"https://www.npmjs.com/package/commander",target:"_blank",rel:"noopener noreferrer"},vn=s("commander.js"),_n=n("h3",{id:"soluciones-no-disponibles",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#soluciones-no-disponibles","aria-hidden":"true"},"#"),s(" Soluciones (No disponibles)")],-1),jn={href:"https://github.com/ULL-ESIT-GRADOII-PL/esprima-pegjs-jsconfeu-talk-private/blob/private/p0-t0-esprima-logging-sol.js",target:"_blank",rel:"noopener noreferrer"},xn=s("Una Soluci\xF3n"),yn={href:"https://github.com/ULL-ESIT-PL-1920/p0-t0-esprima-logging-reto-DanielGlezExp",target:"_blank",rel:"noopener noreferrer"},wn=s("Solucion con los retos"),En=p(`<h2 id="entrega" tabindex="-1"><a class="header-anchor" href="#entrega" aria-hidden="true">#</a> Entrega</h2><p>En el <code>package.json</code> introduzca</p><ul><li><p>Entradas adicionales <code>scripts/test-1</code>, <code>scripts/test-2</code> etc, con los comandos para la ejecuci\xF3n de su soluci\xF3n contra diferentes programas de prueba. Algo as\xED:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;test-1&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node src/my-sol-logging-espree.js test/prueba-1.js&quot;</span><span class="token punctuation">,</span>
      <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>Una entrada <code>scripts/test</code> que ejecute su soluci\xF3n contra todos los programas de prueba</p></li></ul><h2 id="references" tabindex="-1"><a class="header-anchor" href="#references" aria-hidden="true">#</a> References</h2>`,4),qn={href:"/assets/temas/tema0-introduccion-a-pl/espree-visitorkeys",target:"_blank",rel:"noopener noreferrer"},Ln=s("Tipos de Nodos del AST"),In={href:"https://github.com/eslint/espree",target:"_blank",rel:"noopener noreferrer"},Sn=s("Espree"),$n={href:"https://github.com/eslint/espree#options",target:"_blank",rel:"noopener noreferrer"},zn=s("Options for parse and tokenize methods"),An={href:"https://github.com/estools/escodegen",target:"_blank",rel:"noopener noreferrer"},Tn=s("Escodegen repo en GitHub"),Cn={href:"https://github.com/estools/escodegen/wiki/API",target:"_blank",rel:"noopener noreferrer"},Un=s("Escodegen API Doc");function Dn(Pn,Nn){const a=t("ExternalLinkIcon");return o(),c(l,null,[u,n("p",null,[k,n("a",d,[b,e(a)]),m,g,f,h,v]),_,n("ul",null,[n("li",null,[n("a",j,[x,e(a)])]),n("li",null,[n("a",y,[w,e(a)])]),n("li",null,[n("a",E,[q,e(a)]),L,n("a",I,[S,e(a)])])]),$,n("p",null,[z,n("a",A,[T,e(a)]),C,n("a",U,[D,e(a)]),P,n("a",N,[R,e(a)]),V]),O,n("p",null,[G,n("a",M,[B,e(a)]),F,J,H,Q,K]),W,n("ul",null,[n("li",null,[Y,n("a",X,[Z,e(a)]),nn]),n("li",null,[n("a",sn,[an,e(a)])]),n("li",null,[n("a",en,[pn,e(a)])])]),tn,n("ul",null,[n("li",null,[n("a",on,[cn,e(a)])]),n("li",null,[n("a",ln,[rn,e(a)])])]),un,n("ul",null,[n("li",null,[kn,n("a",dn,[bn,e(a)]),n("ul",null,[n("li",null,[n("a",mn,[gn,e(a)]),fn,n("a",hn,[vn,e(a)])])])])]),_n,n("ul",null,[n("li",null,[n("a",jn,[xn,e(a)])]),n("li",null,[n("a",yn,[wn,e(a)])])]),En,n("ul",null,[n("li",null,[n("a",qn,[Ln,e(a)])]),n("li",null,[n("a",In,[Sn,e(a)]),n("ul",null,[n("li",null,[n("a",$n,[zn,e(a)])])])]),n("li",null,[n("a",An,[Tn,e(a)]),n("ul",null,[n("li",null,[n("a",Cn,[Un,e(a)])])])])])],64)}var On=r(i,[["render",Dn]]);export{On as default};
