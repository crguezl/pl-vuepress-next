import{r as t,o,c as r,a as s,g as e,F as l,b as n,h as p}from"./app.0def9ecb.js";import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";const i={},u=s("h2",{id:"esprima-espree-examples",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#esprima-espree-examples","aria-hidden":"true"},"#"),n(" Esprima/Espree Examples")],-1),k=n("En el "),b={href:"https://github.com/ULL-ESIT-GRADOII-PL/esprima-pegjs-jsconfeu-talk",target:"_blank",rel:"noopener noreferrer"},m=n("Repo ULL-ESIT-GRADOII-PL/esprima-pegjs-jsconfeu-talk"),d=n(" encontrar\xE1 el material de esta lecci\xF3n. "),h=s("strong",null,"Clone este repo",-1),y=n("."),g=n("The examples in this repo use a couple of JavaScript compiler frameworks: "),_={href:"http://esprima.org",target:"_blank",rel:"noopener noreferrer"},f=n("Esprima"),v=n(" and Espree."),x={href:"https://github.com/eslint/espree",target:"_blank",rel:"noopener noreferrer"},j=n("Espree"),E=n(" started out as a fork of "),w={href:"http://esprima.org",target:"_blank",rel:"noopener noreferrer"},L=n("Esprima"),I=n(" v1.2.2, the last stable published released of Esprima before work on ECMAScript 6 began. "),T={href:"https://github.com/eslint/espree",target:"_blank",rel:"noopener noreferrer"},S=n("Espree"),A=n(" is now built on top of "),P={href:"https://github.com/ternjs/acorn",target:"_blank",rel:"noopener noreferrer"},N=n("Acorn"),q=n(", which has a modular architecture that allows extension of core functionality. The goal of "),D={href:"https://github.com/eslint/espree",target:"_blank",rel:"noopener noreferrer"},R=n("Espree"),V=n(" is to produce output that is similar to Esprima with a similar API so that it can be used in place of Esprima."),O=s("h3",{id:"repl-example",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#repl-example","aria-hidden":"true"},"#"),n(" REPL example")],-1),U=n("Una vez clonado el "),G={href:"https://github.com/ULL-ESIT-GRADOII-PL/esprima-pegjs-jsconfeu-talk",target:"_blank",rel:"noopener noreferrer"},C=n("repo ULL-ESIT-GRADOII-PL/esprima-pegjs-jsconfeu-talk"),M=n(", instalamos las dependencias:"),J=p(`<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u279C  esprima-pegjs-jsconfeu-talk git:(master) npm i
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>y arrancamos el bucle REPL de Node.JS:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u279C  esprima-pegjs-jsconfeu-talk git:(master) node
Welcome to Node.js v14.4.0.
Type &quot;.help&quot; for more information.
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Cargamos <code>espree</code>:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&gt;</span> <span class="token keyword">const</span> espree <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;espree&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">undefined</span>
<span class="token operator">&gt;</span> espree<span class="token punctuation">.</span>version
<span class="token string">&#39;7.3.1&#39;</span>
<span class="token operator">&gt;</span> espree<span class="token punctuation">.</span>latestEcmaVersion
<span class="token number">12</span>
<span class="token operator">&gt;</span> espree<span class="token punctuation">.</span>supportedEcmaVersions
<span class="token punctuation">[</span>
  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span>
  <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">12</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Navegar en el \xE1rbol AST es complicado. El atributo <a href="espree-visitorkeys"><code>espree.visitorKeys</code></a> nos proporciona la lista de nodos y los nombres de los atributos de sus hijos</p><p>Hagamos un an\xE1lisis l\xE9xico:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&gt;</span> espree<span class="token punctuation">.</span><span class="token function">tokenize</span><span class="token punctuation">(</span><span class="token string">&#39;answer = /* comment*/ 42&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">range</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>
  Token <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;answer&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
    <span class="token literal-property property">range</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  Token <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Punctuator&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>
    <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>
    <span class="token literal-property property">range</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span> <span class="token punctuation">]</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  Token <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Numeric&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;42&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>
    <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">24</span><span class="token punctuation">,</span>
    <span class="token literal-property property">range</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">24</span> <span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>Hagamos ahora un an\xE1lisis sint\xE1ctico:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&gt;</span> espree<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;const answer = 42&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">tokens</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
Uncaught <span class="token punctuation">[</span>SyntaxError<span class="token operator">:</span> The keyword <span class="token string">&#39;const&#39;</span> is reserved
<span class="token punctuation">]</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">index</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">lineNumber</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">column</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>La versi\xF3n ECMA de JS usada por defecto por <code>espree</code> es la 5 y esta no admite <code>const</code></p><p>Especifiquemos la versi\xF3n ECMA que queremos:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&gt;</span> espree<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;const answer = 42&#39;</span><span class="token punctuation">,</span> 
              <span class="token punctuation">{</span> <span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> espree<span class="token punctuation">.</span>latestEcmaVersion<span class="token punctuation">,</span> 
                <span class="token literal-property property">tokens</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
              <span class="token punctuation">)</span>
Node <span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Program&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>
  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    Node <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;VariableDeclaration&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>
      <span class="token literal-property property">declarations</span><span class="token operator">:</span> <span class="token punctuation">[</span>Array<span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">kind</span><span class="token operator">:</span> <span class="token string">&#39;const&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">&#39;script&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">tokens</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    Token <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Keyword&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;const&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    Token <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;answer&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">12</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    Token <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Punctuator&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;=&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">14</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    Token <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Numeric&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&#39;42&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">17</span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>Observe que el \xC1rbol no aparece completo. El log que usa el bucle REPL de Node lo trunca en el hijo <code>declarations</code> (s\xF3lo nos muestra que es un array <code>[Array]</code> sin expandirlo) para que la salida no sea excesivamente larga.</p><p>Para que nos muestre el \xE1rbol vamos a usar el m\xE9todo <code>util.inspect</code> del m\xF3dulo <code>util</code> que convierte un objeto en una string:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&gt;</span> <span class="token keyword">const</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;util&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">undefined</span>
<span class="token operator">&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
    util<span class="token punctuation">.</span><span class="token function">inspect</span><span class="token punctuation">(</span>
        espree<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&#39;const answer = 42&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">ecmaVersion</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
        <span class="token punctuation">{</span><span class="token literal-property property">depth</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span>
    <span class="token punctuation">)</span>
 <span class="token punctuation">)</span>
Node <span class="token punctuation">{</span>
  <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Program&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>
  <span class="token literal-property property">body</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    Node <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;VariableDeclaration&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>
      <span class="token literal-property property">declarations</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        Node <span class="token punctuation">{</span>
          <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;VariableDeclarator&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
          <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>
          <span class="token literal-property property">id</span><span class="token operator">:</span> Node <span class="token punctuation">{</span>
            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Identifier&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>
            <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;answer&#39;</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token literal-property property">init</span><span class="token operator">:</span> Node <span class="token punctuation">{</span>
            <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;Literal&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token number">15</span><span class="token punctuation">,</span>
            <span class="token literal-property property">end</span><span class="token operator">:</span> <span class="token number">17</span><span class="token punctuation">,</span>
            <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">42</span><span class="token punctuation">,</span>
            <span class="token literal-property property">raw</span><span class="token operator">:</span> <span class="token string">&#39;42&#39;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token literal-property property">kind</span><span class="token operator">:</span> <span class="token string">&#39;const&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">sourceType</span><span class="token operator">:</span> <span class="token string">&#39;script&#39;</span>
<span class="token punctuation">}</span>
<span class="token keyword">undefined</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div>`,16),z=n("Usando la herramienta web "),B={href:"https://astexplorer.net",target:"_blank",rel:"noopener noreferrer"},F=n("https://astexplorer.net"),H=n(" podemos navegar el AST producido por varios compiladores JS:"),K=s("a",{href:"https://astexplorer.net/#/gist/b5826862c47dfb7dbb54cec15079b430/latest",target:"_blank"},[n("AST de "),s("code",null,"answer = 42")],-1),W=n(" en "),Q={href:"https://astexplorer.net",target:"_blank",rel:"noopener noreferrer"},X=n("https://astexplorer.net"),Y=s("h3",{id:"example-searching-for-specific-identifiers",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#example-searching-for-specific-identifiers","aria-hidden":"true"},"#"),n(" Example: Searching for Specific Identifiers")],-1),Z=n("The file "),$={href:"https://github.com/ULL-ESIT-GRADOII-PL/esprima-pegjs-jsconfeu-talk/blob/master/idgrep.js",target:"_blank",rel:"noopener noreferrer"},ss=n("idgrep.js"),ns=n(" is a very simple example of using Esprima to do static analysis on JavaScript code."),as=p(`<p>It provides a function <code>idgrep</code> that finds the appearances of identifiers matching a search string inside the input code.</p><p>Given an input like this:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u279C  esprima-pegjs-jsconfeu-talk git:(master) cat hacky.js 
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// This is a hack!</span>
<span class="token keyword">const</span> <span class="token function-variable function">hacky</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> hack <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">&#39;hacky string&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>if we search for <code>hack</code> it produces:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u279C  esprima-pegjs-jsconfeu-talk git:(master) ./idgrep.js hacky.js
1:6: const hacky = () =&gt; {
2:8:     let hack = 3;
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Observe how the appearances of <code>hack</code> inside the comment or the string aren&#39;t shown</p><h2 id="practica-espree-logging" tabindex="-1"><a class="header-anchor" href="#practica-espree-logging" aria-hidden="true">#</a> Pr\xE1ctica Espree Logging</h2>`,8),es={href:"/practicas/esprima-logging",target:"_blank",rel:"noopener noreferrer"},ps=n("Descripci\xF3n de la Pr\xE1ctica Espree Logging"),ts=p('<h2 id="astexplorer" tabindex="-1"><a class="header-anchor" href="#astexplorer" aria-hidden="true">#</a> ASTExplorer</h2><ul><li><a href="https://astexplorer.net/" target="_blank">astexplorer.net demo</a></li></ul><h2 id="master-the-art-of-the-ast" tabindex="-1"><a class="header-anchor" href="#master-the-art-of-the-ast" aria-hidden="true">#</a> Master the Art of the AST</h2><ul><li><a href="master-the-art-of-the-ast">More Advanced examples from the talk <em>Master the Art of the AST</em></a></li></ul><h2 id="syntax-analysis-peg-js-example" tabindex="-1"><a class="header-anchor" href="#syntax-analysis-peg-js-example" aria-hidden="true">#</a> Syntax Analysis: PEG.js Example</h2>',5),os={href:"https://github.com/ULL-ESIT-GRADOII-PL/esprima-pegjs-jsconfeu-talk/blob/master/altjs.js",target:"_blank",rel:"noopener noreferrer"},rs=n("altjs.js"),ls=n(' is the code for the "AltJS language in 5 minutes" section presented in the second half of the '),cs={href:"http://2013.jsconf.eu/speakers/patrick-dubroy-parsing-compiling-and-static-metaprogramming.html",target:"_blank",rel:"noopener noreferrer"},is=n("talk Parsing, Compiling, and Static Metaprogramming"),us=n(" by Patrick Dubroy"),ks=s("h2",{id:"references",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#references","aria-hidden":"true"},"#"),n(" References")],-1),bs={href:"https://github.com/eslint/espree",target:"_blank",rel:"noopener noreferrer"},ms=n("Espree"),ds={href:"https://github.com/eslint/espree#options",target:"_blank",rel:"noopener noreferrer"},hs=n("Options for parse and tokenize methods"),ys=s("li",null,[s("a",{href:"https://astexplorer.net/",target:"_blank"},"astexplorer.net demo")],-1),gs={href:"https://github.com/ULL-ESIT-GRADOII-PL/esprima-pegjs-jsconfeu-talk/blob/master/idgrep.coffee",target:"_blank",rel:"noopener noreferrer"},_s=n("idgrep.coffee");function fs(vs,xs){const a=t("ExternalLinkIcon");return o(),r(l,null,[u,s("p",null,[k,s("a",b,[m,e(a)]),d,h,y]),s("p",null,[g,s("a",_,[f,e(a)]),v]),s("p",null,[s("a",x,[j,e(a)]),E,s("a",w,[L,e(a)]),I,s("a",T,[S,e(a)]),A,s("a",P,[N,e(a)]),q,s("a",D,[R,e(a)]),V]),O,s("p",null,[U,s("a",G,[C,e(a)]),M]),J,s("p",null,[z,s("strong",null,[s("a",B,[F,e(a)])]),H]),s("ul",null,[s("li",null,[K,W,s("a",Q,[X,e(a)])])]),Y,s("p",null,[Z,s("a",$,[ss,e(a)]),ns]),as,s("ul",null,[s("li",null,[s("a",es,[ps,e(a)])])]),ts,s("p",null,[s("a",os,[rs,e(a)]),ls,s("a",cs,[is,e(a)]),us]),ks,s("ul",null,[s("li",null,[s("a",bs,[ms,e(a)]),s("ul",null,[s("li",null,[s("a",ds,[hs,e(a)])])])]),ys,s("li",null,[s("a",gs,[_s,e(a)])])])],64)}var ws=c(i,[["render",fs]]);export{ws as default};
